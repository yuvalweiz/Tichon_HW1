Index: src/SystemC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Error.*;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Vector;\r\n\r\npublic class SystemC {\r\n    private User _connectedUser;\r\n    public static HashMap<String, Product> PrductDict = new HashMap<String, Product>();\r\n\r\n    public SystemC(){\r\n        this._connectedUser = null;\r\n    } //defult constructor\r\n    public boolean AddUser(String _login_id,String _password,int premium,Address address,String phone, String email){\r\n        if(User.UserDict.containsKey(_login_id)){\r\n            return false;\r\n        }\r\n        User newUser= new User(_login_id,_password);\r\n        Customer newCustomer = new Customer(address,phone,email);\r\n        Account newAccount;\r\n        if(premium == 1){\r\n            newAccount = new PremiumAccount(_login_id,newCustomer);\r\n            newCustomer.set_account(newAccount);\r\n            newAccount.set_customer(newCustomer);\r\n        }\r\n        if (premium == 0){\r\n            newAccount = new Account(newCustomer);\r\n            newCustomer.set_account(newAccount);\r\n            newAccount.set_customer(newCustomer);\r\n        }\r\n        newCustomer.set_user(newUser);\r\n        newUser.set_customer(newCustomer);\r\n        Date date = new Date();\r\n        ShoppingCart cart = new ShoppingCart(date);\r\n        return true;\r\n\r\n    }\r\n    public boolean RemoveUser(String Login_id) throws Erorr {\r\n        if (User.UserDict.containsKey(Login_id)!= true)\r\n        {\r\n            return false;\r\n        }\r\n        if(_connectedUser!=null && _connectedUser.get_login_id().equals(Login_id)){\r\n            logoutUser(_connectedUser.get_login_id());\r\n        }\r\n        Account account = User.UserDict.get(Login_id).get_customer().get_account();\r\n        for(int i=0;i<account.getMyOrders().size();i++){\r\n            Account.OrderDict.remove(account.getMyOrders().get(i));\r\n        }\r\n\r\n\r\n        User.UserDict.remove(Login_id);\r\n        return true;\r\n    }\r\n\r\n    public boolean loginUser(String _loginid, String password) throws Erorr {\r\n        Erorr error;\r\n        if(this._connectedUser != null){\r\n            error = new there_is_user_connected_EX();\r\n            throw error;\r\n        }\r\n\r\n        if(!User.UserDict.containsKey(_loginid)){\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n\r\n        }\r\n        if(!User.UserDict.get(_loginid).get_password().equals(password)){\r\n            error = new pass_is_wrong_EX();\r\n            throw error;\r\n        }\r\n        this._connectedUser = User.UserDict.get(_loginid);\r\n        return true;\r\n    }\r\n    public boolean logoutUser(String _loginid) throws Erorr {\r\n        Erorr error;\r\n        if(this._connectedUser == null){\r\n            error = new there_is_no_user_connected_EX();\r\n            throw error;\r\n        }\r\n        this._connectedUser = null;\r\n        return true;\r\n    }\r\n\r\n    public void Create_new_order(Address address) throws Erorr {\r\n\r\n        if(_connectedUser==null)\r\n        {\r\n            Erorr error = new there_is_no_user_connected_EX();\r\n            throw error;\r\n        }\r\n        Date currDate = new Date();\r\n        Order order = new Order(currDate,address,_connectedUser.get_customer().get_account());\r\n        _connectedUser.get_customer().get_account().AddOrder(order);\r\n        _connectedUser.get_customer().get_account().set_lastOrder(order.get_number());\r\n        System.out.println(\"Your Order number is: \" + order.get_number());\r\n\r\n    }\r\n\r\n    public void Add_product_to_order(String Order_ID,String Login_ID,String Product_Name) throws Erorr {\r\n        Erorr error ;\r\n\r\n        if (_connectedUser == null)\r\n        {\r\n            error = new there_is_no_user_connected_EX();\r\n            throw error;\r\n        }\r\n        User sellerUser = User.UserDict.get(Login_ID);\r\n        if (sellerUser == null)\r\n        {\r\n\r\n            error=new id_is_wrong_EX();\r\n            throw error;\r\n        }\r\n        Account Seller_account = sellerUser.get_customer().get_account();\r\n        if(!(Seller_account instanceof PremiumAccount))\r\n        {\r\n            error = new not_premium_user();\r\n            throw error;\r\n        }\r\n\r\n        Order Buyerorder = _connectedUser.get_customer().get_account().getOrder(Order_ID);\r\n        if (Buyerorder == null)\r\n        {\r\n            error = new order_is_not_exist();\r\n            throw error;\r\n        }\r\n        Product SellerProduct = ((PremiumAccount) Seller_account).GetProduct(Product_Name);\r\n        if (SellerProduct==null)\r\n        {\r\n            error = new product_is_not_exist();\r\n            throw error;\r\n        }\r\n        //SellerProduct.Add_Line_Item(new LineItem(77,77));\r\n        //for (int i=0;i<SellerProduct.getLineItemsVec().size();i++) // I dont think we need this\r\n\r\n          //  if (SellerProduct.getLineItemsVec().get(i).getQuantity()==0)\r\n            //{\r\n              //  SellerProduct.getLineItemsVec().remove(i);\r\n            //}\r\n\r\n        //}\r\n        //SellerProduct.getLineItemsVec().get(0).setQuantity(SellerProduct.getLineItemsVec().get(0).getQuantity()-1);//\r\n\r\n       // int price=SellerProduct.getLineItemsVec().get(0).getPrice();\r\n        Buyerorder.AddProduct(SellerProduct,50);\r\n\r\n\r\n\r\n    }\r\n    public void DisplayOrder() throws Erorr {\r\n        Erorr erorr;\r\n        if(_connectedUser == null){\r\n            erorr = new there_is_no_user_connected_EX();\r\n            throw erorr;\r\n        }\r\n        Order myOrder = _connectedUser.get_customer().get_account().getOrder(_connectedUser.get_customer().get_account().get_lastOrder());\r\n        if(myOrder == null){\r\n            erorr = new order_is_not_exist();\r\n            throw erorr;\r\n        }\r\n        int price;\r\n        int quan;\r\n        float sum = 0;\r\n        if(myOrder.getLineItemsVec() != null){\r\n            for(int i=0;i<myOrder.getLineItemsVec().size();i++){\r\n                quan = myOrder.getLineItemsVec().get(i).getQuantity();\r\n                price = myOrder.getLineItemsVec().get(i).getPrice();\r\n                sum = sum + (quan * price);\r\n            }}\r\n        myOrder.set_total(sum);\r\n\r\n        System.out.println(\"Order Number: \" + myOrder.get_number());\r\n        System.out.println(\"Order Date: \" + myOrder.get_ordered());\r\n        System.out.println(\"Shipment Date: \" + myOrder.get_shipped());\r\n        System.out.println(\"Shipment Address: \" + myOrder.get_ship_to());\r\n        System.out.println(\"Order status: \" + myOrder.get_status());\r\n        System.out.println(\"Total payment: \" + myOrder.get_total());\r\n\r\n    }\r\n\r\n    public void LinkProduct (String name,int price,int Quan) throws Erorr {\r\n        Erorr error;\r\n        if (_connectedUser == null)\r\n        {\r\n            error = new there_is_no_user_connected_EX();\r\n            throw error;\r\n        }\r\n        Account account = _connectedUser.get_customer().get_account();\r\n        if(!(account instanceof PremiumAccount))\r\n        {\r\n            error = new not_premium_user();\r\n            throw error;\r\n        }\r\n        Product product = PrductDict.get(name);\r\n        if(product == null){\r\n            error = new product_is_not_exist();\r\n        }\r\n        LineItem lineItem = new LineItem(Quan,price);\r\n        product.getLineItemsVec().add(lineItem);\r\n        ((PremiumAccount) account).AddProduct(product);\r\n\r\n    }\r\n\r\n\r\n    public void AddProduct(String name,String supllierName){\r\n        Supplier supnik = new Supplier(supllierName);\r\n        Product prod = new Product(name,supnik);\r\n        supnik.Add_Product(prod);\r\n        PrductDict.put(prod.get_name(),prod);\r\n    }\r\n\r\n    public void Delete_Product (String Product_name) throws Erorr {\r\n        Erorr e;\r\n        if(PrductDict.containsKey(Product_name)==false)\r\n        {\r\n            e=new product_is_not_exist();\r\n            throw e;\r\n        }\r\n        for(var entry : User.UserDict.entrySet()){\r\n            if(entry.getValue().get_customer().get_account() instanceof PremiumAccount){\r\n                PremiumAccount Paccount = (PremiumAccount) entry.getValue().get_customer().get_account();\r\n                for(int i =0;i<Paccount.getProducts().size();i++){\r\n                    if(Paccount.getProducts().get(i).get_id().equals(Product_name)){\r\n                        Paccount.getProducts().remove(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        PrductDict.remove(Product_name);\r\n    }\r\n\r\n    public void ShowAllObjects()\r\n    {\r\n        Vector<LineItem> lineitemss = new Vector<LineItem>();\r\n        Account account;\r\n        User user;\r\n        Order order;\r\n        ShoppingCart shoppingCart;\r\n        Payment payment;\r\n        for(var entry : User.UserDict.entrySet())\r\n        {\r\n            user = entry.getValue();\r\n            if (user!=null)\r\n            {\r\n                System.out.println(user.toString());\r\n                System.out.println(user.toString());\r\n            }\r\n\r\n            account = entry.getValue().get_customer().get_account();\r\n            System.out.println( account.toString());\r\n            if (account.getPayments().size()!=0) {\r\n\r\n                for (int i = 0; i < account.getPayments().size(); i++)\r\n                {\r\n\r\n                    System.out.println(account.getPayments().get(i));\r\n                }\r\n            }\r\n\r\n            HashMap<String,Order> Orders=entry.getValue().get_customer().get_account().getOrderDict();\r\n            for(var orderentry : Orders.entrySet()) {\r\n                System.out.println(orderentry.getValue().toString());\r\n                if(orderentry.getValue().getPayments().size()!=0) {\r\n                    for (int j = 0; j < orderentry.getValue().getPayments().size(); j++) {\r\n                        payment = orderentry.getValue().getPayments().get(j);\r\n                        System.out.println(payment.toString());\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            // public void ShowObjectID(String ID){\r\n\r\n            //  }\r\n            shoppingCart = entry.getValue().get_shcart();\r\n            if (shoppingCart!=null)\r\n            {\r\n                System.out.println(shoppingCart.toString());\r\n            }\r\n\r\n\r\n\r\n        }\r\n        for(var entry : Supplier.SupllierDict.entrySet())\r\n        {\r\n            System.out.println(entry.getValue().toString());\r\n        }\r\n        for(var entry : PrductDict.entrySet())\r\n        {\r\n            System.out.println(entry.getValue().toString());\r\n            lineitemss= entry.getValue().getLineItemsVec();\r\n            for (int i=0;i<lineitemss.size();i++)\r\n            {\r\n                System.out.println(lineitemss.get(i).toString());\r\n            }\r\n\r\n        }\r\n    }\r\n    public boolean ShowObjectID(String ID) throws Erorr { //T-Payment|P-Product|A-Account|C-Customer|O-Order|S-Supllier\r\n        Erorr error;\r\n        String firstChar = String.valueOf(ID.charAt(0));\r\n        if(firstChar.equals(\"T\")){\r\n            for(var entry : User.UserDict.entrySet()){\r\n                Vector<Payment> payments =entry.getValue().get_customer().get_account().getPayments();\r\n                for(int i =0;i<payments.size();i++){\r\n                    if(payments.get(i).getId().equals(ID)){\r\n                        System.out.println(payments.get(i).toString());\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n\r\n        }\r\n        if(firstChar.equals(\"P\")){\r\n            if(!PrductDict.containsKey(ID)){\r\n                error = new product_is_not_exist();\r\n                throw error;\r\n            }\r\n            System.out.println(PrductDict.get(ID));\r\n            return true;\r\n        }\r\n        if(firstChar.equals(\"A\")){\r\n            for(var entry : User.UserDict.entrySet()){\r\n                if(entry.getValue().get_customer().get_account().get_id().equals(ID)){\r\n                    System.out.println(entry.getValue().get_customer().get_account());\r\n                    return true;\r\n                }\r\n            }\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n        }\r\n        if(firstChar.equals(\"C\")){\r\n            for(var entry : User.UserDict.entrySet()){\r\n                if(entry.getValue().get_customer().get_id().equals(ID)){\r\n                    System.out.println(entry.getValue().get_customer());\r\n                    return true;\r\n                }\r\n            }\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n        }\r\n       // if(firstChar.equals(\"O\")){\r\n         //   for(var entry : User.UserDict.entrySet()){\r\n              //  for(var entry2 : entry.getValue().get_customer().get_account().getOrderDict().entrySet()){\r\n               //     if(entry2.getValue().get_number().equals(ID)){\r\n                //        System.out.println(entry2.getValue());\r\n                //        return true;\r\n               //     }\r\n            //    }\r\n          //  }\r\n           // error = new order_is_not_exist();\r\n          //  throw error;\r\n\r\n        //}\r\n        if(firstChar.equals(\"O\")){\r\n            if(!Account.OrderDict.containsKey(ID)){\r\n                error = new id_is_wrong_EX();\r\n                throw error;\r\n            }\r\n            System.out.println(Account.OrderDict.get(ID));\r\n            return true;\r\n\r\n        }\r\n        if(firstChar.equals(\"S\")){\r\n            if(!Supplier.SupllierDict.containsKey(ID)){\r\n                error = new id_is_wrong_EX();\r\n                throw error;\r\n            }\r\n            System.out.println(Supplier.SupllierDict.get(ID));\r\n            return true;\r\n\r\n        }\r\n        error = new id_is_wrong_EX();\r\n        throw error;\r\n\r\n    }\r\n\r\n    public boolean ShowObjectUSER (String ID) throws Erorr {\r\n        Erorr error;\r\n        if(!User.UserDict.containsKey(ID)){\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n        }\r\n        System.out.println(User.UserDict.get(ID));\r\n        return true;\r\n    }\r\n\r\n    public boolean ShowObjectSupplier(String ID) throws Erorr {\r\n        Erorr error;\r\n        if(!Supplier.SupllierDict.containsKey(ID)){\r\n            error = new id_is_wrong_EX();\r\n            throw error;\r\n        }\r\n        System.out.println(Supplier.SupllierDict.get(ID));\r\n        return true;\r\n    }\r\n\r\n    public boolean ShowObjectProduct(String ID) throws Erorr {\r\n        Erorr error;\r\n        if(!PrductDict.containsKey(ID)){\r\n            error = new product_is_not_exist();\r\n            throw error;\r\n        }\r\n        System.out.println(PrductDict.get(ID));\r\n        return true;\r\n    }\r\n\r\n    public ImmediatePayment AddImmediatePayment(String orderid,String details,Boolean Phoneconfirmation) throws Erorr {\r\n        float sum =0;\r\n        Erorr e;\r\n        Order order = Account.OrderDict.get(orderid);\r\n        if(order==null)\r\n        {\r\n            e= new order_is_not_exist();\r\n            throw e;\r\n        }\r\n        if (order.getLineItemsVec().size()==0)\r\n        {\r\n            sum =0;\r\n        }\r\n        else\r\n        {\r\n            for (int i=0;i<order.getLineItemsVec().size();i++)\r\n            {\r\n                sum +=order.getLineItemsVec().get(i).getQuantity()*order.getLineItemsVec().get(i).getPrice();\r\n            }\r\n        }\r\n\r\n        Date date = new Date();\r\n\r\n        return new ImmediatePayment(date,sum,details,Phoneconfirmation);\r\n    }\r\n\r\n    public DelayedPayment AddDelayedPayment(String orderid,String details,Date PaymentDate) throws Erorr {\r\n        float sum =0;\r\n        Erorr e;\r\n        Order order = Account.OrderDict.get(orderid);\r\n        if(order==null)\r\n        {\r\n            e= new order_is_not_exist();\r\n            throw e;\r\n        }\r\n        if (order.getLineItemsVec().size()==0)\r\n        {\r\n            sum =0;\r\n        }\r\n        else\r\n        {\r\n            for (int i=0;i<order.getLineItemsVec().size();i++)\r\n            {\r\n                sum +=order.getLineItemsVec().get(i).getQuantity()*order.getLineItemsVec().get(i).getPrice();\r\n            }\r\n        }\r\n        Date date = new Date();\r\n        return new DelayedPayment(date,sum,details,PaymentDate);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SystemC.java b/src/SystemC.java
--- a/src/SystemC.java	
+++ b/src/SystemC.java	
@@ -251,7 +251,7 @@
             if (user!=null)
             {
                 System.out.println(user.toString());
-                System.out.println(user.toString());
+
             }
 
             account = entry.getValue().get_customer().get_account();
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main\r\n{\r\n    public static void main(String[] args) throws IOException {\r\n        /* System initialization  */\r\n        SystemC system = new SystemC();\r\n        //Supplier osem = new Supplier(\"Osem\");\r\n        //Supplier EastWest = new Supplier(\"EastWest\");\r\n        //Product bamba = new Product(\"Bamba\",osem);\r\n        system.AddProduct(\"Bamba\",\"Osem\");\r\n        system.AddProduct(\"Ramen\",\"EastWest\");\r\n        //Product ramen = new Product(\"Ramen\",EastWest);\r\n        system.AddUser(\"Dani\",\"Dani123\",0,null,null,null);\r\n        system.AddUser(\"Dana\",\"Dana123\",1,null,null,null);\r\n        PremiumAccount danaIsPremium = (PremiumAccount) User.UserDict.get(\"Dana\").get_customer().get_account();\r\n        danaIsPremium.AddProductByName(\"Bamba\");\r\n        /* End of System initialization  */\r\n\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n        Scanner scanner = new Scanner(System.in);\r\n        int choice;\r\n        String login_id;\r\n        int p_account;\r\n        String pass;\r\n        String customer_country;\r\n        String customer_city;\r\n        String customer_street;\r\n        Address address;\r\n        String customer_phone;\r\n        String customer_email;\r\n        int customer_addres_num;\r\n        while(true)\r\n        {\r\n\r\n            System.out.println(\"Press 1 for Add user\");\r\n            System.out.println(\"Press 2 for Remove user\");\r\n            System.out.println(\"Press 3 for Login user \");\r\n            System.out.println(\"Press 4 for Logout user \");\r\n            System.out.println(\"Press 5 for Create new order\");\r\n            System.out.println(\"Press 6 for Add product to order\");\r\n            System.out.println(\"Press 7 for Display order\");\r\n            System.out.println(\"Press 8 for Link Product \");\r\n            System.out.println(\"Press 9 for Add Product \");\r\n            System.out.println(\"Press 10 for Delete Product \");\r\n            System.out.println(\"Press 11 for ShowAllObjects \");\r\n            System.out.println(\"Press 12 for ShowObjectId \");\r\n            System.out.println(\"Press 13 to Quit\\n \\n \");\r\n\r\n            choice = scanner.nextInt();\r\n\r\n\r\n\r\n            switch (choice) {\r\n\r\n                //First case for finding the addition\r\n                case 1:\r\n                    try {\r\n                        System.out.println(\"Enter login id: \");\r\n                        login_id = reader.readLine();\r\n                        System.out.println(\"Enter password: \");\r\n                        pass = reader.readLine();\r\n                        System.out.println(\"Premium account: - Yes enter 1/No enter 0\");\r\n                         p_account = scanner.nextInt();\r\n                         if(p_account != 0 || p_account != 1){\r\n                             System.out.println(\"Please enter '1' or '0' only! \");\r\n                             break;\r\n                         }\r\n                        System.out.println(\"Enter customer country: \");\r\n                        customer_country = reader.readLine();\r\n                        System.out.println(\"Enter customer city: \");\r\n                        customer_city = reader.readLine();\r\n                        System.out.println(\"Enter customer street: \");\r\n                        customer_street = reader.readLine();\r\n                        System.out.println(\"Enter customer number: \");\r\n                        customer_addres_num = scanner.nextInt();\r\n                        address = new Address(customer_country, customer_city, customer_street, customer_addres_num);\r\n                        System.out.println(\"Enter customer phone: \");\r\n                        customer_phone = reader.readLine();\r\n                        System.out.println(\"Enter customer email: \");\r\n                        customer_email = reader.readLine();\r\n                        if (!system.AddUser(login_id, pass, p_account, address, customer_phone, customer_email)) {\r\n                            System.out.println(\"User is not valid\");\r\n                            break;\r\n\r\n                        }\r\n                    }\r\n                    catch (Exception InputMismatchException ) {\r\n                        System.out.println(\"Your input invalid, please try agian!\");\r\n                        scanner.nextLine();\r\n                        break;\r\n                    }\r\n                    System.out.println(\"The user was successfully added\");\r\n                    break;\r\n\r\n                case 2:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter login id: \");\r\n                        login_id = reader.readLine();\r\n                        if (!system.RemoveUser(login_id))\r\n                        {\r\n                            System.out.println(\"User does not exist\");\r\n                            break;\r\n                        }\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"The user was successfully removed\");\r\n                    break;\r\n                case 3:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter login id: \");\r\n                        login_id = reader.readLine();\r\n                        System.out.println(\"Enter password: \");\r\n                        pass = reader.readLine();\r\n                        if (!system.loginUser(login_id, pass))\r\n                        {\r\n                            System.out.println(\"Login problem\");\r\n                            break;\r\n                        }\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"The user was successfully logged in\");\r\n                    break;\r\n                case 4:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter login id: \");\r\n                        login_id = reader.readLine();\r\n                        if (!system.logoutUser(login_id))\r\n                        {\r\n                            System.out.println(\"logout problem\");\r\n                            break;\r\n                        }\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"The user was successfully Logged out\");\r\n                    break;\r\n                case 5:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter login id: \");\r\n                        login_id = reader.readLine();\r\n                        System.out.println(\"Enter customer country: \");\r\n                        customer_country = reader.readLine();\r\n                        System.out.println(\"Enter customer city: \");\r\n                        customer_city = reader.readLine();\r\n                        System.out.println(\"Enter customer street: \");\r\n                        customer_street = reader.readLine();\r\n                        System.out.println(\"Enter customer number: \");\r\n                        customer_addres_num = scanner.nextInt();\r\n                        address = new Address(customer_country, customer_city, customer_street, customer_addres_num);\r\n                        system.Create_new_order(address);\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"A new order has been successfully created\");\r\n                    break;\r\n                case 6:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter order id: \");\r\n                        String order_id = reader.readLine();\r\n                        System.out.println(\"Enter seller login id: \");\r\n                        login_id = reader.readLine();\r\n                        System.out.println(\"Enter product name: \");\r\n                        String product_name = reader.readLine();\r\n                        try\r\n                        {\r\n                            system.Add_product_to_order(order_id, login_id, product_name);\r\n\r\n                        }\r\n                        catch (Exception Error)\r\n                        {\r\n                            System.out.println(Error.getMessage());\r\n                            break;\r\n\r\n                        }\r\n                        System.out.println(\"Do you want to add payment method? Yes enter 1/Not enter 0\");\r\n                        int want_payment = scanner.nextInt();\r\n                        if (want_payment == 0)\r\n                        {\r\n                            break;\r\n                        }\r\n                        if (want_payment == 1)\r\n                        {\r\n                            System.out.println(\"Which payment method you prefer? \");\r\n                            System.out.println(\"For delayed payment press 1 \");\r\n                            System.out.println(\"For immediate payment press 0 \");\r\n                            int payment_type = scanner.nextInt();\r\n                            if (payment_type == 1)\r\n                            {\r\n                                System.out.println(\"Enter details\");\r\n                                String details = reader.readLine();\r\n                                System.out.println(\"Enter payment date in the following format: \");\r\n                                System.out.println(\"DD/MM/YYYY\");\r\n                                String payment_date = reader.readLine();\r\n                                Date date = new SimpleDateFormat(\"dd/MM/yyyy\").parse(payment_date);\r\n                                DelayedPayment delayed_payment = system.AddDelayedPayment(order_id, details, date);\r\n                                System.out.println(delayed_payment.toString());\r\n\r\n                            }\r\n                            if (payment_type == 0)\r\n                            {\r\n                                System.out.println(\"Enter details\");\r\n                                String details = reader.readLine();\r\n                                System.out.println(\"Payment with phoneconfirmation? Yes enter 1/Not enter 0\");\r\n                                int pc = scanner.nextInt();\r\n                                if (pc == 0)\r\n                                {\r\n                                    ImmediatePayment immediate_payment  = system.AddImmediatePayment(order_id, details, false);\r\n                                    System.out.println(immediate_payment.toString());\r\n\r\n                                }\r\n                                if (pc == 1)\r\n                                {\r\n                                    ImmediatePayment immediate_payment= system.AddImmediatePayment(order_id, details, true);\r\n                                    System.out.println(immediate_payment.toString());\r\n\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Adding a product to the order was done successfully\");\r\n                    break;\r\n                case 7:\r\n                    try\r\n                    {\r\n                        system.DisplayOrder();\r\n                    } catch (Exception Error)\r\n                    {\r\n\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Display order done\");\r\n                    break;\r\n                case 8:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter product name: \");\r\n                        String name = reader.readLine();\r\n                        System.out.println(\"Enter price: \");\r\n                        int price = scanner.nextInt();\r\n                        System.out.println(\"Enter product quantity: \");\r\n                        int Quan = scanner.nextInt();\r\n                        system.LinkProduct(name, price, Quan);\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Link product done\");\r\n\r\n                    break;\r\n                case 9:\r\n                    System.out.println(\"Enter name: \");\r\n                    String name = reader.readLine();\r\n                    System.out.println(\"Enter supplier: \");\r\n                    String supllierName = reader.readLine();\r\n                    system.AddProduct(name, supllierName);\r\n\r\n                    System.out.println(\"Product has been added\");\r\n                    break;\r\n                case 10:\r\n                    try\r\n                    {\r\n                        System.out.println(\"Enter product name: \");\r\n                        name = reader.readLine();\r\n                        system.Delete_Product(name);\r\n                    }\r\n                    catch (Exception Error)\r\n                    {\r\n\r\n                        System.out.println(Error.getMessage());\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Product has been deleted\");\r\n                    break;\r\n                case 11:\r\n                    system.ShowAllObjects();\r\n                    System.out.println(\"Show all objects done\");\r\n                    break;\r\n                case 12:\r\n                    int choose;\r\n                    while (true)\r\n                    {\r\n                        System.out.println(\"Please choose category: \");\r\n                        System.out.println(\"Press 1 for user\");\r\n                        System.out.println(\"Press 2 for product\");\r\n                        System.out.println(\"Press 3 for supplier \");\r\n                        System.out.println(\"Press 4 for other object\");\r\n                        System.out.println(\"Press 5 to return \\n \\n \");\r\n\r\n                        choose = scanner.nextInt();\r\n                        switch (choose)\r\n                        {\r\n                            case 1:\r\n                                try\r\n                                {\r\n                                    System.out.println(\"Enter id: \");\r\n                                    String id = reader.readLine();\r\n                                    system.ShowObjectUSER(id);\r\n                                }\r\n                                catch (Exception Error)\r\n                                {\r\n                                    System.out.println(Error.getMessage());\r\n                                    break;\r\n                                }\r\n                                System.out.println(\"Show user id was done\");\r\n                                break;\r\n\r\n                            case 2:\r\n                                try\r\n                                {\r\n                                    System.out.println(\"Enter id: \");\r\n                                    String id = reader.readLine();\r\n                                    system.ShowObjectProduct(id);\r\n                                }\r\n                                catch (Exception Error)\r\n                                {\r\n                                    System.out.println(Error.getMessage());\r\n                                    break;\r\n                                }\r\n                                System.out.println(\"Show product id was done\");\r\n\r\n                                break;\r\n\r\n                            case 3:\r\n                                try\r\n                                {\r\n                                    System.out.println(\"Enter id:\");\r\n                                    String id = reader.readLine();\r\n                                    system.ShowObjectSupplier(id);\r\n                                }\r\n                                catch (Exception Error)\r\n                                {\r\n                                    System.out.println(Error.getMessage());\r\n                                    break;\r\n                                }\r\n                                System.out.println(\"Show supplier id was done\");\r\n                                break;\r\n\r\n                            case 4:\r\n                                try\r\n                                {\r\n                                    System.out.println(\"Enter id: \");\r\n                                    String id = reader.readLine();\r\n                                    system.ShowObjectID(id);\r\n                                }\r\n                                catch (Exception Error)\r\n                                {\r\n                                    System.out.println(Error.getMessage());\r\n                                    break;\r\n                                }\r\n                                System.out.println(\"Show object id was done\");\r\n                                break;\r\n\r\n                            case 5:\r\n                                break;\r\n\r\n                            default:\r\n                                System.out.println(\"Invalid choice!Please make a valid choice. \\\\n\\\\n\");\r\n                        }\r\n                    }\r\n                case 13:\r\n                    return;\r\n                //default case to display the message invalid choice made by the user\r\n                default:\r\n                    System.out.println(\"Invalid choice!Please make a valid choice. \\\\n\\\\n\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	
@@ -11,6 +11,7 @@
 public class Main
 {
     public static void main(String[] args) throws IOException {
+
         /* System initialization  */
         SystemC system = new SystemC();
         //Supplier osem = new Supplier("Osem");
@@ -71,7 +72,7 @@
                         pass = reader.readLine();
                         System.out.println("Premium account: - Yes enter 1/No enter 0");
                          p_account = scanner.nextInt();
-                         if(p_account != 0 || p_account != 1){
+                         if(p_account != 0 && p_account != 1){
                              System.out.println("Please enter '1' or '0' only! ");
                              break;
                          }
@@ -317,8 +318,10 @@
                     break;
                 case 12:
                     int choose;
-                    while (true)
+                    boolean flag =true;
+                    while (true && flag)
                     {
+
                         System.out.println("Please choose category: ");
                         System.out.println("Press 1 for user");
                         System.out.println("Press 2 for product");
@@ -391,11 +394,14 @@
                                 break;
 
                             case 5:
-                                break;
+                                String[] a = new String[0];
+                                main(a);
 
                             default:
                                 System.out.println("Invalid choice!Please make a valid choice. \\n\\n");
+                                break;
                         }
+
                     }
                 case 13:
                     return;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"corretto-18\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="corretto-18" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="corretto-18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
